import{_ as k,C as r,c as h,o as p,j as i,a as n,aA as e,G as t,w as l}from"./chunks/framework.D2Vt1PAC.js";const Z=JSON.parse('{"title":"Functions for matrices","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),d={name:"api.md"},o={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},j={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},R={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.827ex"},xmlns:"http://www.w3.org/2000/svg",width:"31.846ex",height:"6.785ex",role:"img",focusable:"false",viewBox:"0 -1749.5 14075.8 2999","aria-hidden":"true"},D={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""};function J(I,s,N,S,z,P){const a=r("Badge");return p(),h("div",null,[s[100]||(s[100]=i("h1",{id:"Functions-for-matrices",tabindex:"-1"},[n("Functions for matrices "),i("a",{class:"header-anchor",href:"#Functions-for-matrices","aria-label":'Permalink to "Functions for matrices {#Functions-for-matrices}"'},"​")],-1)),s[101]||(s[101]=i("h2",{id:"Imputation",tabindex:"-1"},[n("Imputation "),i("a",{class:"header-anchor",href:"#Imputation","aria-label":'Permalink to "Imputation {#Imputation}"'},"​")],-1)),i("details",o,[i("summary",null,[s[0]||(s[0]=i("a",{id:"BigRiverJunbi.imputeKNN",href:"#BigRiverJunbi.imputeKNN"},[i("span",{class:"jlbinding"},"BigRiverJunbi.imputeKNN")],-1)),s[1]||(s[1]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[3]||(s[3]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imputeKNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{Union{Missing, Float64}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threshold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NearestNeighbors.MinkowskiMetric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Euclidean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing elements based on k-nearest neighbors (KNN). Returns a new matrix without modifying the original matrix. This method is almost an exact copy of the KNN imputation method from <a href="https://github.com/invenia/Impute.jl" target="_blank" rel="noreferrer">Impute.jl</a>.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>k</code>: number of nearest neighbors to use for imputation.</p></li><li><p><code>threshold</code>: threshold for the number of missing neighbors above which the imputation is skipped.</p></li><li><p><code>dims</code>: dimension along which the statistic is calculated.</p></li><li><p><code>distance</code>: distance metric to use for the nearest neighbors search, taken from Distances.jl. Default is <code>Euclidean()</code>. This can only be one of the Minkowski metrics i.e. Euclidean, Cityblock, Minkowski and Chebyshev.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L353-L377",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"BigRiverJunbi.imputeKNN!-Tuple{AbstractMatrix{Union{Missing, Float64}}, Int64, Float64, Union{Nothing, Int64}, Distances.UnionMinkowskiMetric}",href:"#BigRiverJunbi.imputeKNN!-Tuple{AbstractMatrix{Union{Missing, Float64}}, Int64, Float64, Union{Nothing, Int64}, Distances.UnionMinkowskiMetric}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.imputeKNN!")],-1)),s[5]||(s[5]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imputeKNN!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{Union{Missing, Float64}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, threshold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NearestNeighbors.MinkowskiMetric</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing elements based on k-nearest neighbors (KNN) imputation. Writes the result back to the original matrix. This method is almost an exact copy of the KNN imputation method from <a href="https://github.com/invenia/Impute.jl" target="_blank" rel="noreferrer">Impute.jl</a>.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>k</code>: number of nearest neighbors to use for imputation.</p></li><li><p><code>threshold</code>: threshold for the number of missing neighbors above which the imputation is skipped.</p></li><li><p><code>dims</code>: dimension along which the statistic is calculated.</p></li><li><p><code>distance</code>: distance metric to use for the nearest neighbors search, taken from Distances.jl. Default is <code>Euclidean()</code>. This can only be one of the Minkowski metrics i.e. Euclidean, Cityblock, Minkowski and Chebyshev.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L394-L416",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[8]||(s[8]=i("a",{id:"BigRiverJunbi.impute_QRILC-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_QRILC-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_QRILC")],-1)),s[9]||(s[9]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_QRILC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tune_sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    eps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.005</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns imputated matrix based on the &quot;Quantile regression Imputation for left-censored data&quot; (QRILC) method. The function is based on the function <code>impute.QRILC</code> from the <code>imputeLCMD</code> R package, with one difference: the default value of <code>eps</code> is set to 0.005 instead of 0.001.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>tune_sigma</code>: coefficient that controls the SD of the MNAR distribution: - 1 if the complete data distribution is supposed to be gaussian. - 0 &lt; tune_sigma &lt; 1 if the complete data distribution is supposed to be left-censored. Default is 1.0.</p></li><li><p><code>eps</code>: small value added to the quantile for stability.</p></li><li><p><code>rng</code>: random number generator. Default is <code>Random.default_rng()</code>.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L467-L490",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[12]||(s[12]=i("a",{id:"BigRiverJunbi.impute_half_min!-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_half_min!-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_half_min!")],-1)),s[13]||(s[13]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_half_min!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing elements with half of the minimum value of the non-missing elements and writes the result back to the original matrix.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>For integer matrices, the half of the minimum value is calculated by integer division i.e. the result of the division is rounded down to the nearest integer if the result is not an integer.</p></div><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>dims</code>: dimension along which the minimum values are calculated. Default is nothing, which means the whole matrix is used.</p></li></ul>',5)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L170-L187",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[s[16]||(s[16]=i("a",{id:"BigRiverJunbi.impute_half_min-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_half_min-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_half_min")],-1)),s[17]||(s[17]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_half_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing elements with half of the minimum value of the non-missing elements and returns a new matrix without modifying the original matrix.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>For integer matrices, the half of the minimum value is calculated by integer division i.e. the result of the division is rounded down to the nearest integer if the result is not an integer.</p></div><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>dims</code>: dimension along which the minimum values are calculated. Default is nothing, which means the whole matrix is used.</p></li></ul>',5)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L148-L165",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[20]||(s[20]=i("a",{id:"BigRiverJunbi.impute_median_cat!-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_median_cat!-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_median_cat!")],-1)),s[21]||(s[21]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_median_cat!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Imputes missing elements based on a categorical imputation: - 0: Missing values - 1: Values below the median - 2: Values equal to or above the median Writes the result back to the original matrix.</p><p><strong>Arguments</strong></p><ul><li><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L320-L333",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[24]||(s[24]=i("a",{id:"BigRiverJunbi.impute_median_cat-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_median_cat-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_median_cat")],-1)),s[25]||(s[25]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_median_cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Imputes missing elements based on a categorical imputation: - 0: Missing values - 1: Values below the median - 2: Values equal to or above the median Returns a new matrix without modifying the original matrix.</p><p><strong>Arguments</strong></p><ul><li><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L302-L315",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[28]||(s[28]=i("a",{id:"BigRiverJunbi.impute_min!-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_min!-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_min!")],-1)),s[29]||(s[29]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_min!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing elements with the minimum value of the non-missing elements and writes the result back to the original matrix.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>dims</code>: dimension along which the minimum values are calculated. Default is nothing, which means the whole matrix is used.</p></li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L131-L143",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[32]||(s[32]=i("a",{id:"BigRiverJunbi.impute_min-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_min-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_min")],-1)),s[33]||(s[33]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing elements with the minimum value of the non-missing elements and returns a new matrix without modifying the original matrix.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>dims</code>: dimension along which the minimum values are calculated. Default is nothing, which means the whole matrix is used.</p></li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L114-L126",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[s[36]||(s[36]=i("a",{id:"BigRiverJunbi.impute_min_prob",href:"#BigRiverJunbi.impute_min_prob"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_min_prob")],-1)),s[37]||(s[37]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[39]||(s[39]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_min_prob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tune_sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rng</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractRNG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default_rng</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing values with random draws from a gaussian distribution centered in the minimum value observed and with standard deviation equal to the median value of the population of line-wise standard deviations. Returns a new matrix without modifying the original matrix.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>q</code>: quantile of the minimum values to use for imputation. Default is 0.01.</p></li><li><p><code>dims</code>: dimension along which the minimum values are calculated. Default is 1.</p></li><li><p><code>tune_sigma</code>: coefficient that controls the sd of the MNAR distribution: - 1 if the complete data distribution is supposed to be gaussian. - 0 &lt; tune_sigma &lt; 1 if the complete data distribution is supposed to be left-censored. Default is 1.0.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[38]||(s[38]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L198-L221",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[40]||(s[40]=i("a",{id:"BigRiverJunbi.impute_min_prob!",href:"#BigRiverJunbi.impute_min_prob!"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_min_prob!")],-1)),s[41]||(s[41]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[43]||(s[43]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_min_prob!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{Union{Missing, Float64}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tune_sigma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rng</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractRNG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default_rng</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces missing values with random draws from a gaussian distribution centered around the minimum value observed and with standard deviation equal to the median value of the population of line-wise standard deviations. Writes the result back to the original matrix.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</p></li><li><p><code>q</code>: quantile of the minimum values to use for imputation. Default is 0.01.</p></li><li><p><code>dims</code>: dimension along which the minimum values are calculated. Default is 1.</p></li><li><p><code>tune_sigma</code>: coefficient that controls the sd of the MNAR distribution: - 1 if the complete data distribution is supposed to be gaussian. - 0 &lt; tune_sigma &lt; 1 if the complete data distribution is supposed to be left-censored. Default is 1.0.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L231-L253",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",B,[i("summary",null,[s[44]||(s[44]=i("a",{id:"BigRiverJunbi.impute_zero!-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_zero!-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_zero!")],-1)),s[45]||(s[45]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_zero!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replace missing elements with zero and writes the result back to the original matrix.</p><p><strong>Arguments</strong></p><ul><li><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[46]||(s[46]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L102-L111",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Q,[i("summary",null,[s[48]||(s[48]=i("a",{id:"BigRiverJunbi.impute_zero-Tuple{Matrix{<:Union{Missing, Real}}}",href:"#BigRiverJunbi.impute_zero-Tuple{Matrix{<:Union{Missing, Real}}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.impute_zero")],-1)),s[49]||(s[49]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[51]||(s[51]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">impute_zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns a matrix with missing elements replaced with zero without modifying the original matrix.</p><p><strong>Arguments</strong></p><ul><li><code>data</code>: matrix of omics value, e.g., metabolomics matrix, where the rows are the samples and the columns are the features.</li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[50]||(s[50]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L89-L99",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[52]||(s[52]=i("a",{id:"BigRiverJunbi.substitute!-Tuple{AbstractArray{<:Union{Missing, Real}}, Function}",href:"#BigRiverJunbi.substitute!-Tuple{AbstractArray{<:Union{Missing, Real}}, Function}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.substitute!")],-1)),s[53]||(s[53]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">substitute!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statistic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Substitutes missing values with the value calculated by the statistic function along the specified dimension and writes the result back to the original array.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: array of values. One example: matrix of metabolomics data, where the rows are the features and the columns are the samples.</p></li><li><p><code>statistic</code>: function that calculates the value to substitute the missing values. The function must return a value of the same type as the data.</p></li><li><p><code>dims</code>: dimension along which the statistic is calculated.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[54]||(s[54]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L27-L44",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[s[56]||(s[56]=i("a",{id:"BigRiverJunbi.substitute-Tuple{AbstractArray{<:Union{Missing, Real}}, Function}",href:"#BigRiverJunbi.substitute-Tuple{AbstractArray{<:Union{Missing, Real}}, Function}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.substitute")],-1)),s[57]||(s[57]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">substitute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{&lt;:Union{Missing, Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statistic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Substitutes missing values with the value calculated by the statistic function along the specified dimension and returns a new array without modifying the original array.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: array of values. One example: matrix of metabolomics data, where the rows are the features and the columns are the samples.</p></li><li><p><code>statistic</code>: function that calculates the value to substitute the missing values. The function must return a value of the same type as the data.</p></li><li><p><code>dims</code>: dimension along which the statistic is calculated.</p></li></ul>`,4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[58]||(s[58]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/impute.jl#L1-L18",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[102]||(s[102]=i("h2",{id:"Normalization",tabindex:"-1"},[n("Normalization "),i("a",{class:"header-anchor",href:"#Normalization","aria-label":'Permalink to "Normalization {#Normalization}"'},"​")],-1)),i("details",_,[i("summary",null,[s[60]||(s[60]=i("a",{id:"BigRiverJunbi.huberize-Tuple{Matrix{<:Real}}",href:"#BigRiverJunbi.huberize-Tuple{Matrix{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.huberize")],-1)),s[61]||(s[61]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">huberize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error_on_zero_mad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Performs Huberization for sample intensities.</p><p><strong>Arguments</strong></p><ul><li><p><code>mat</code>: The matrix to normalize.</p></li><li><p><code>alpha</code>: The alpha parameter for Huberization. Default is 1.</p></li><li><p><code>error_on_zero_mad</code>: Whether to throw an error if the MAD is zero. Default is <code>true</code>.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>If you set <code>error_on_zero_mad</code> to <code>false</code>, this function will return a result with NaN values if the MAD is zero. This can be useful if you are expecting this behavior and want to handle it yourself, but should be used with caution.</p></div><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  9.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigRiverJunbi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">huberize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.86772</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0002</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      4.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     5.89787</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7.83846</span></span></code></pre></div>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[62]||(s[62]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L125-L160",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[s[64]||(s[64]=i("a",{id:"BigRiverJunbi.huberize-Tuple{Vector{<:Real}}",href:"#BigRiverJunbi.huberize-Tuple{Vector{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.huberize")],-1)),s[65]||(s[65]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">huberize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error_on_zero_mad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Performs Huberization for a single vector.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: The vector to Huberize.</p></li><li><p><code>alpha</code>: The alpha parameter for the Huberization. Default is 1.0.</p></li><li><p><code>error_on_zero_mad</code>: Whether to throw an error if the MAD is zero. Default is <code>true</code>.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>If you set <code>error_on_zero_mad</code> to <code>false</code>, this function will return a result with NaN values if the MAD is zero. This can be useful if you are expecting this behavior and want to handle it yourself, but should be used with caution.</p></div>`,5)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[66]||(s[66]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L171-L188",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[68]||(s[68]=i("a",{id:"BigRiverJunbi.huberloss-Tuple{Real}",href:"#BigRiverJunbi.huberloss-Tuple{Real}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.huberloss")],-1)),s[69]||(s[69]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[73]||(s[73]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">huberloss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the Huber loss for a given value. This is defined as:</p>',2)),i("mjx-container",j,[(p(),h("svg",R,[...s[70]||(s[70]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1642,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2308.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mrow" transform="translate(3364.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M661 -1243L655 -1249H622L604 -1240Q503 -1190 434 -1107T348 -909Q346 -897 346 -499L345 -98L343 -82Q335 3 287 87T157 223Q146 232 145 236Q144 240 144 250Q144 265 145 268T157 278Q242 333 288 417T343 583L345 600L346 1001Q346 1398 348 1410Q379 1622 600 1739L622 1750H655L661 1744V1727V1721Q661 1712 661 1710T657 1705T648 1700T630 1690T602 1668Q589 1659 574 1643T531 1593T484 1508T459 1398Q458 1389 458 1001Q458 614 457 605Q441 435 301 316Q254 277 202 251L250 222Q260 216 301 185Q443 66 457 -104Q458 -113 458 -501Q458 -888 459 -897Q463 -944 478 -988T509 -1060T548 -1114T580 -1149T602 -1167Q620 -1183 634 -1192T653 -1202T659 -1207T661 -1220V-1226V-1243Z" style="stroke-width:3;"></path></g><g data-mml-node="mtable" transform="translate(806,0)"><g data-mml-node="mtr" transform="translate(0,754.4)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(793.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtd" transform="translate(5969.7,0)"><g data-mml-node="mtext"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" style="stroke-width:3;"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(278,0)" style="stroke-width:3;"></path><path data-c="A0" d="" transform="translate(584,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(834,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1112,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1684,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2239.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3295.6,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-774.3)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(640,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1029,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1307,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1879,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2379.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(3379.4,0)"><g data-mml-node="msup" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(673,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(423.8,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><rect width="961.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4580.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(5969.7,0)"><g data-mml-node="mtext"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" style="stroke-width:3;"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(278,0)" style="stroke-width:3;"></path><path data-c="A0" d="" transform="translate(584,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(834,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1112,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1684,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2239.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3295.6,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g></g></g></g><g data-mml-node="mo" transform="translate(10711.2,0) translate(0 250)"></g></g></g></g>',1)])])),s[71]||(s[71]=i("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[i("mi",null,"L"),i("mo",{stretchy:"false"},"("),i("mi",null,"x"),i("mo",{stretchy:"false"},")"),i("mo",null,"="),i("mrow",{"data-mjx-texclass":"INNER"},[i("mo",{"data-mjx-texclass":"OPEN"},"{"),i("mtable",{columnalign:"left left",columnspacing:"1em",rowspacing:".2em"},[i("mtr",null,[i("mtd",null,[i("mfrac",null,[i("mn",null,"1"),i("mn",null,"2")]),i("msup",null,[i("mi",null,"x"),i("mn",null,"2")])]),i("mtd",null,[i("mtext",null,"if "),i("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),i("mi",null,"x"),i("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),i("mo",null,"≤"),i("mi",null,"α")])]),i("mtr",null,[i("mtd",null,[i("mi",null,"α"),i("mo",{stretchy:"false"},"("),i("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),i("mi",null,"x"),i("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),i("mo",null,"−"),i("mfrac",null,[i("msup",null,[i("mi",null,"α"),i("mn",null,"2")]),i("mn",null,"2")]),i("mo",{stretchy:"false"},")")]),i("mtd",null,[i("mtext",null,"if "),i("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),i("mi",null,"x"),i("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),i("mo",null,">"),i("mi",null,"α")])])]),i("mo",{"data-mjx-texclass":"CLOSE",fence:"true",stretchy:"true",symmetric:"true"})])])],-1))]),s[74]||(s[74]=i("p",null,[i("strong",null,"Arguments")],-1)),s[75]||(s[75]=i("ul",null,[i("li",null,[i("p",null,[i("code",null,"x"),n(": The value to compute the Huber loss for.")])]),i("li",null,[i("p",null,[i("code",null,"alpha"),n(": The alpha parameter for the Huber loss. Default is 1.")])])],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[72]||(s[72]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L199-L214",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[76]||(s[76]=i("a",{id:"BigRiverJunbi.intnorm-Tuple{Matrix{<:Real}}",href:"#BigRiverJunbi.intnorm-Tuple{Matrix{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.intnorm")],-1)),s[77]||(s[77]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intnorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lambda</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Total Area Normalization for each row or column. By default, it normalizes each row. This requires that the matrix has all positive values.</p><p><strong>Arguments</strong></p><ul><li><p><code>mat</code>: The matrix to normalize.</p></li><li><p><code>dims</code>: The dimension to normalize across. Default is 2.</p></li><li><p><code>lambda</code>: The lambda parameter for the normalization. Default is 1.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  9.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigRiverJunbi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intnorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       0.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       0.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        0.35</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.333333</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.142857</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.238095</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0714286</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.214286</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0.0625</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0.21875</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.1875</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0.28125</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[78]||(s[78]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L1-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",M,[i("summary",null,[s[80]||(s[80]=i("a",{id:"BigRiverJunbi.pqnorm-Tuple{Matrix{<:Real}}",href:"#BigRiverJunbi.pqnorm-Tuple{Matrix{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.pqnorm")],-1)),s[81]||(s[81]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pqnorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; lambda</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Performs a probabilistic quotient normalization (PQN) for sample intensities. This assumes that the matrix is organized as samples x features and requires that the matrix have all positive values.</p><p><strong>Arguments</strong></p><ul><li><code>mat</code>: The matrix to normalize.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  9.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigRiverJunbi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pqnorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       0.35</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.30625</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.13125</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.21875</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.065625</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.196875</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0.0625</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.21875</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.1875</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0.28125</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[82]||(s[82]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L37-L64",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[s[84]||(s[84]=i("a",{id:"BigRiverJunbi.quantilenorm-Tuple{Matrix{<:Real}}",href:"#BigRiverJunbi.quantilenorm-Tuple{Matrix{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.quantilenorm")],-1)),s[85]||(s[85]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[87]||(s[87]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">quantilenorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Performs quantile normalization for sample intensities. This assumes that the matrix is organized as samples x features.</p><p><strong>Arguments</strong></p><ul><li><code>data</code>: The matrix to normalize.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  9.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigRiverJunbi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">quantilenorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.7</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.6</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[86]||(s[86]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L83-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",V,[i("summary",null,[s[88]||(s[88]=i("a",{id:"BigRiverJunbi.standardize-Tuple{Matrix{<:Real}}",href:"#BigRiverJunbi.standardize-Tuple{Matrix{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.standardize")],-1)),s[89]||(s[89]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[91]||(s[91]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">standardize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; center</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Standardize a matrix i.e. scale to unit variance, with the option of centering or not.</p><p><strong>Arguments</strong></p><ul><li><p><code>mat</code>: The matrix to standardize.</p></li><li><p><code>center</code>: Whether to center the data. Default is <code>true</code>.</p></li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[90]||(s[90]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/normalize.jl#L221-L229",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[103]||(s[103]=i("h2",{id:"Transformation",tabindex:"-1"},[n("Transformation "),i("a",{class:"header-anchor",href:"#Transformation","aria-label":'Permalink to "Transformation {#Transformation}"'},"​")],-1)),i("details",L,[i("summary",null,[s[92]||(s[92]=i("a",{id:"BigRiverJunbi.log_tx-Tuple{Matrix{<:Real}}",href:"#BigRiverJunbi.log_tx-Tuple{Matrix{<:Real}}"},[i("span",{class:"jlbinding"},"BigRiverJunbi.log_tx")],-1)),s[93]||(s[93]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log_tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, constant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes logarithm on a matrix, adding a constant to all values (for instance, to avoid log(0)). Default base is 2, default constant is 0.</p><p><strong>Arguments</strong></p><ul><li><p><code>mat</code>: The matrix to transform.</p></li><li><p><code>base</code>: The base of the logarithm. Default is 2.</p></li><li><p><code>constant</code>: The constant to add to all values. Default is 0.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigRiverJunbi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log_tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat; constant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.584963</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      1.58496</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2.16993</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2.58496</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2.16993</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.16993</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.58496</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.58496</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.80735</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[94]||(s[94]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/transforms.jl#L1-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",H,[i("summary",null,[s[96]||(s[96]=i("a",{id:"BigRiverJunbi.meancenter_tx",href:"#BigRiverJunbi.meancenter_tx"},[i("span",{class:"jlbinding"},"BigRiverJunbi.meancenter_tx")],-1)),s[97]||(s[97]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[99]||(s[99]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meancenter_tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Mean center a matrix across the specified dimension. This requires that the matrix has all positive values.</p><p><strong>Arguments</strong></p><ul><li><p><code>mat</code>: The matrix to transform.</p></li><li><p><code>dims</code>: The dimension to mean center across. Default is 1.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigRiverJunbi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meancenter_tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66667</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.16667</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.83333</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.16667</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.83333</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   3.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.33333</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[98]||(s[98]=[i("a",{href:"https://github.com/senresearch/BigRiverJunbi.jl/blob/e219a4a09e58a062a4890f82dfcb4c5827bca3d8/src/transforms.jl#L37-L64",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const O=k(d,[["render",J]]);export{Z as __pageData,O as default};
